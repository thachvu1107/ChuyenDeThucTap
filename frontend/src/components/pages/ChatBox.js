import React, { useState, useRef, useEffect } from "react";
import axios from "axios";
import "../css/ChatBox.css";
import { Api } from "../../api/Api";
import { ImageApi } from "../../api/ImageApi";
import Fuse from "fuse.js";

const ChatBox = () => {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState("");
  const [loading, setLoading] = useState(false);
  const chatBoxRef = useRef(null);

  useEffect(() => {
    if (chatBoxRef.current) {
      chatBoxRef.current.scrollTop = chatBoxRef.current.scrollHeight;
    }
  }, [messages]);

  const getAuth = async (token) => {
    try {
      console.log("üîê B·∫Øt ƒë·∫ßu x√°c th·ª±c v·ªõi token:", token);
      const response = await axios.get(`${Api}/auth`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      const user = response.data.user;
      if (user) {
        console.log("‚úÖ X√°c th·ª±c th√†nh c√¥ng, user:", user);
        return { success: true, user };
      } else {
        console.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y user trong k·∫øt qu·∫£.");
        return {
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng.",
        };
      }
    } catch (error) {
      console.error("‚ùå L·ªói khi x√°c th·ª±c:", error.response || error.message);
      return {
        success: false,
        message:
          error.response?.status === 401
            ? "Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i."
            : "L·ªói khi x√°c th·ª±c. Vui l√≤ng th·ª≠ l·∫°i.",
      };
    }
  };
  const getCartItems = async (token) => {
    let cartItems = [];
    if (token) {
      const authResult = await getAuth(token);
      if (!authResult.success) {
        return { success: false, message: authResult.message };
      }
      try {
        const response = await axios.get(`${Api}/product/cart-list/`, {
          headers: { Authorization: `Bearer ${token}` },
        });
        cartItems = response.data;
      } catch (error) {
        console.error("Error fetching cart:", error.response || error.message);
        return {
          success: false,
          message: "C√≥ l·ªói khi l·∫•y th√¥ng tin gi·ªè h√†ng. Vui l√≤ng th·ª≠ l·∫°i!",
        };
      }
    } else {
      const localCartList = localStorage.getItem("cartList");
      if (localCartList) {
        try {
          const response = await axios.post(`${Api}/product/cart-list/guest`, {
            cartList: localCartList,
          });
          cartItems = response.data;
        } catch (error) {
          console.error(
            "Error fetching guest cart:",
            error.response || error.message
          );
          return {
            success: false,
            message: "C√≥ l·ªói khi l·∫•y th√¥ng tin gi·ªè h√†ng. Vui l√≤ng th·ª≠ l·∫°i!",
          };
        }
      }
    }
    return { success: true, cartItems };
  };

  const getUserDefaultAddress = async (userId, token) => {
    try {
      const result = await axios.get(`${Api}/user/default-address/${userId}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      if (result.status === 200 && result.data) {
        const user = result.data.user;
        const defaultAddress =
          user.addresses && user.addresses.length > 0
            ? user.addresses[0]
            : null;
        if (defaultAddress) {
          return {
            success: true,
            address: {
              firstName: defaultAddress.firstname,
              lastName: defaultAddress.lastname,
              email: user.email,
              address: defaultAddress.address,
              city: defaultAddress.city,
              country: defaultAddress.country,
              zip: defaultAddress.zip,
              telephone: defaultAddress.telephone,
            },
          };
        }
      }
      return { success: false, message: "Kh√¥ng t√¨m th·∫•y ƒë·ªãa ch·ªâ m·∫∑c ƒë·ªãnh." };
    } catch (error) {
      console.error("L·ªói khi l·∫•y ƒë·ªãa ch·ªâ m·∫∑c ƒë·ªãnh:", error);
      return {
        success: false,
        message: "L·ªói khi l·∫•y ƒë·ªãa ch·ªâ m·∫∑c ƒë·ªãnh. Vui l√≤ng th·ª≠ l·∫°i!",
      };
    }
  };

  const createUserAddress = async (addressData) => {
    try {
      const response = await axios.post(
        `${Api}/user/create-user-address`,
        addressData
      );
      localStorage.setItem("token", response.data.token);
      return { success: true, user: response.data.user };
    } catch (error) {
      console.error("Error creating user address:", error);
      return {
        success: false,
        message: "Kh√¥ng th·ªÉ t·∫°o ƒë·ªãa ch·ªâ. Vui l√≤ng th·ª≠ l·∫°i!",
      };
    }
  };

  const fetchProducts = async () => {
    try {
      const response = await axios.get(`${Api}/product`, {
        headers: { Accept: "application/json" },
      });
      return Array.isArray(response.data) ? response.data : [];
    } catch (error) {
      console.error(
        "Error fetching products:",
        error.response || error.message
      );
      return [];
    }
  };
  const searchProducts = async (searchTerm) => {
    try {
      console.log("ƒê·∫ßu v√†o", searchTerm);
      const response = await axios.post(`${Api}/search/chatbox`, {
        searchTerm: searchTerm,
      });

      console.log("Search API Response:", response.data.data);
      return response.data.data || [];
    } catch (error) {
      console.error(
        "Error searching products:",
        error.response || error.message
      );
      return [];
    }
  };

  const formatProductList = (products, limit = products.length) => {
    const limitedProducts = products.slice(0, limit);
    if (limitedProducts.length === 0) {
      return "Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o ƒë·ªÉ hi·ªÉn th·ªã.";
    }
    let response = `<table style="width:100%; border-collapse: collapse;">
      <thead>
        <tr style="border-bottom: 1px solid #ddd;">
          <th>ID</th><th>T√™n s·∫£n ph·∫©m</th><th>H√¨nh ·∫£nh</th><th>Danh m·ª•c</th><th>Th∆∞∆°ng hi·ªáu</th><th>Gi√°</th>
        </tr>
      </thead>
      <tbody>`;
    limitedProducts.forEach((product) => {
      response += `
        <tr style="border-bottom: 1px solid #ddd;">
          <td>${product.id}</td>
          <td><a href="/dashboard/product/edit/${product.id}" target="_blank">${
        product.name
      }</a></td>
          <td><img src="${ImageApi}/img/${product.photo}" alt="${
        product.name
      }" style="width:50px;" /></td>
          <td>${product.category?.name || "-"}</td>
          <td>${product.brand || "-"}</td>
          <td>${product.price}</td>
        </tr>`;
    });
    response += `</tbody></table>`;
    return response;
  };

  const formatProductDetails = (product) => {
    return `
      <div>
        <h3>Chi ti·∫øt s·∫£n ph·∫©m: <a href="/dashboard/product/edit/${
          product.id
        }" target="_blank">${product.name}</a></h3>
        <p><strong>ID:</strong> ${product.id}</p>
        <p><strong>T√™n s·∫£n ph·∫©m:</strong> ${product.name}</p>
        <p><strong>H√¨nh ·∫£nh:</strong> <img src="${ImageApi}/img/${
      product.photo
    }" alt="${product.name}" style="width:100px;" /></p>
        <p><strong>Danh m·ª•c:</strong> ${product.category?.name || "-"}</p>
        <p><strong>Th∆∞∆°ng hi·ªáu:</strong> ${product.brand || "-"}</p>
        <p><strong>Gi√°:</strong> ${product.price}</p>
        <p><strong>Chi ti·∫øt:</strong> ${product.description || "-"}</p>
        <p><strong>K√≠ch th∆∞·ªõc:</strong> ${
          product.stocks?.length > 0 ? product.stocks[0].size : "-"
        }</p>
        <p><strong>M√†u s·∫Øc:</strong> ${
          product.stocks?.length > 0 ? product.stocks[0].color : "-"
        }</p>
        <p><strong>S·ªë l∆∞·ª£ng:</strong> ${
          product.stocks?.length > 0 ? product.stocks[0].quantity : "-"
        }</p>
      </div>`;
  };

  const formatCartList = (cartItems) => {
    if (!cartItems || cartItems.length === 0) {
      return "Gi·ªè h√†ng c·ªßa b·∫°n hi·ªán ƒëang tr·ªëng. H√£y th√™m s·∫£n ph·∫©m b·∫±ng l·ªánh: 'th√™m v√†o gi·ªè h√†ng id [s·ªë] k√≠ch th∆∞·ªõc [size] m√†u [color] s·ªë l∆∞·ª£ng [s·ªë]'.";
    }

    let subtotal = 0;
    cartItems.forEach((item) => {
      subtotal += item.stock.product.price * item.quantity;
    });

    let response = `<table style="width:100%; border-collapse: collapse;">
      <thead>
        <tr style="border-bottom: 1px solid #ddd;">
          <th>ID</th><th>T√™n s·∫£n ph·∫©m</th><th>H√¨nh ·∫£nh</th><th>K√≠ch th∆∞·ªõc</th><th>M√†u s·∫Øc</th><th>S·ªë l∆∞·ª£ng</th><th>Gi√°</th><th>T·ªïng</th>
        </tr>
      </thead>
      <tbody>`;
    cartItems.forEach((item) => {
      const totalPrice = item.stock.product.price * item.quantity;
      response += `
        <tr style="border-bottom: 1px solid #ddd;">
          <td>${item.id}</td>
          <td><a href="/products/${item.stock.product.id}" target="_blank">${
        item.stock.product.name
      }</a></td>
          <td><img src="${ImageApi}/img/${item.stock.product.photo}" alt="${
        item.stock.product.name
      }" style="width:50px;" /></td>
          <td>${item.stock.size}</td>
          <td>${item.stock.color}</td>
          <td>${item.quantity}</td>
          <td>${item.stock.product.price.toLocaleString("vi-VN", {
            style: "currency",
            currency: "VND",
          })}</td>
          <td>${totalPrice.toLocaleString("vi-VN", {
            style: "currency",
            currency: "VND",
          })}</td>
        </tr>`;
    });
    response += `</tbody></table>`;
    response += `<p><strong>T·ªïng c·ªông:</strong> ${subtotal.toLocaleString(
      "vi-VN",
      { style: "currency", currency: "VND" }
    )}</p>`;
    response += `<p><a href="/checkout">Ti·∫øn h√†nh thanh to√°n</a></p>`;
    return response;
  };

  const formatOrderSummary = (cartItems, address) => {
    const summary = formatCartList(cartItems);
    const addressDetails = `
      <p><strong>ƒê·ªãa ch·ªâ giao h√†ng:</strong></p>
      <p>H·ªç t√™n: ${address.firstName} ${address.lastName}</p>
      <p>ƒê·ªãa ch·ªâ: ${address.address}, ${address.city}, ${address.country}</p>
      <p>M√£ ZIP: ${address.zip}</p>
      <p>S·ªë ƒëi·ªán tho·∫°i: ${address.telephone}</p>
    `;
    return `${summary}${addressDetails}<p>B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒë·∫∑t h√†ng kh√¥ng? H√£y tr·∫£ l·ªùi 'oke', 'c√≥', ho·∫∑c 'r·ªìi' ƒë·ªÉ ti·∫øp t·ª•c.</p>`;
  };

  const isAddressValid = (address) => {
    const requiredFields = [
      "firstName",
      "lastName",
      "address",
      "city",
      "country",
      "zip",
      "telephone",
    ];
    return requiredFields.every(
      (field) => address[field] && address[field].trim() !== ""
    );
  };

  const parseAddress = (input) => {
    const parts = input.split(",").map((part) => part.trim());
    if (parts.length < 6) return null;
    return {
      firstName: parts[0].split(" ").slice(0, -1).join(" ") || "Unknown",
      lastName: parts[0].split(" ").slice(-1)[0] || "Unknown",
      address: parts[1],
      city: parts[2],
      country: parts[3],
      zip: parts[4],
      telephone: parts[5],
    };
  };

  const createOrder = async (token, cartItems, address, method) => {
    const userId = parseInt(localStorage.getItem("userId"), 10);
    const orderItems = cartItems.map((item) => ({
      product_id: item.stock.product.id,
      quantity: item.quantity,
      name: item.stock.product.name,
      image: item.stock.product.photo,
      size: item.stock.size,
      color: item.stock.color,
      price: item.stock.product.price * item.quantity,
    }));

    const total = cartItems.reduce(
      (sum, item) => sum + item.stock.product.price * item.quantity,
      0
    );

    const orderData = {
      user_id: userId,
      order_items: orderItems,
      note: "",
      total,
      method,
    };

    try {
      await axios.post(`${Api}/order`, orderData, {
        headers: { Authorization: `Bearer ${token}` },
      });

      await axios.delete(`${Api}/cart/clear`, {
        headers: { Authorization: `Bearer ${token}` },
      });

      localStorage.removeItem(`flagChat:${userId}`);
      localStorage.removeItem(`flagChatState:${userId}`);
      localStorage.removeItem("selectedItems");

      return { success: true, message: "ƒê·∫∑t h√†ng th√†nh c√¥ng!" };
    } catch (error) {
      console.error(`${method} order error:`, error);
      return {
        success: false,
        message: "ƒê·∫∑t h√†ng kh√¥ng th√†nh c√¥ng! Vui l√≤ng th·ª≠ l·∫°i.",
      };
    }
  };

  const initiateVNPayPayment = async (token, total) => {
    const paymentData = {
      amount: total,
      orderId: `ORDER_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      returnUrl: `http://localhost:3000/checkout`,
    };

    try {
      const response = await axios.post(`${Api}/vnpay`, paymentData, {
        headers: { Authorization: `Bearer ${token}` },
      });
      if (response.data.code === "00" && response.data.data) {
        return { success: true, paymentUrl: response.data.data };
      }
      return {
        success: false,
        message: "Kh√¥ng th·ªÉ kh·ªüi t·∫°o thanh to√°n VNPay. Vui l√≤ng th·ª≠ l·∫°i!",
      };
    } catch (error) {
      console.error("VNPay payment error:", error);
      return {
        success: false,
        message: "ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω thanh to√°n VNPay. Vui l√≤ng th·ª≠ l·∫°i!",
      };
    }
  };

  const removeDiacritics = (str) => {
    return str
      .normalize("NFD")
      .replace(/[\u0300-\u036f]/g, "")
      .replace(/ƒë/g, "d")
      .replace(/ƒê/g, "D");
  };
  const token = localStorage.getItem("token");

  const handleSend = async () => {
    if (!input.trim()) return;

    const newUserMessage = { role: "user", content: input };
    setMessages((prev) => [...prev, newUserMessage]);
    setInput("");
    setLoading(true);

    try {
      const userId = localStorage.getItem("userId");

      const flagChatKey = `flagChat:${userId}`;

      const flagChatStateKey = `flagChatState:${userId}`;
      let orderState = JSON.parse(localStorage.getItem(flagChatStateKey)) || {};

      if (orderState.stage) {
        const lowerInput = input.toLowerCase().trim();
        const normalizedInput = removeDiacritics(lowerInput);

        if (orderState.stage === "awaiting") {
          const address = parseAddress(input);
          if (!address || !isAddressValid(address)) {
            setMessages((prev) => [
              ...prev,
              {
                role: "bot",
                content:
                  "ƒê·ªãa ch·ªâ cung c·∫•p ƒë·∫ßy ƒë·ªß: H·ªç t√™n, ƒê·ªãa ch·ªâ, Th√†nh ph·ªë, Qu·ªëc gia, M√£ ZIP, S·ªë ƒëi·ªán tho·∫°i (c√°ch nhau b·∫±ng d·∫•u ph·∫©y). V√≠ d·ª•: 'Nguyen Van A, 123 ƒê∆∞·ªùng L√°ng, H√† N·ªôi, Vi·ªát Nam, 100000, 0123456789'. N·∫øu ch∆∞a c√≥ t√†i kho·∫£n, th√™m email, m·∫≠t kh·∫©u, x√°c nh·∫≠n m·∫≠t kh·∫©u. V√≠ d·ª•: 'Nguyen Van A, 123 ƒê∆∞·ªùng L√°ng, H√† N·ªôi, Vi·ªát Nam, 100000, 0123456789, a@example.com, pass123, pass123'.",
              },
            ]);
            return;
          }

          if (!token) {
            if (
              !address.email ||
              !address.password ||
              !address.passwordConfirm
            ) {
              setMessages((prev) => [
                ...prev,
                {
                  role: "bot",
                  content:
                    "Vui l√≤ng cung c·∫•p email, m·∫≠t kh·∫©u v√† x√°c nh·∫≠n m·∫≠t kh·∫©u ƒë·ªÉ t·∫°o t√†i kho·∫£n. V√≠ d·ª•: 'Nguyen Van A, 123 ƒê∆∞·ªùng L√°ng, H√† N·ªôi, Vi·ªát Nam, 100000, 0123456789, a@example.com, pass123, pass123'.",
                },
              ]);
              return;
            }

            const createResult = await createUserAddress({
              firstName: address.firstName,
              lastName: address.lastName,
              email: address.email,
              address: address.address,
              city: address.city,
              country: address.country,
              zip: address.zip,
              telephone: address.telephone,
              password: address.password,
              passwordConfirm: address.passwordConfirm,
              localCartList: localStorage.getItem("cartList"),
            });

            if (!createResult.success) {
              setMessages((prev) => [
                ...prev,
                { role: "bot", content: createResult.message },
              ]);
              return;
            }

            localStorage.setItem("userId", createResult.user.id);
          } else {
            const createResult = await createUserAddress({
              firstName: address.firstName,
              lastName: address.lastName,
              address: address.address,
              city: address.city,
              country: address.country,
              zip: address.zip,
              telephone: address.telephone,
            });

            if (!createResult.success) {
              setMessages((prev) => [
                ...prev,
                { role: "bot", content: createResult.message },
              ]);
              return;
            }
          }

          orderState = {
            ...orderState,
            stage: "awaiting_confirmation",
            address,
          };
          localStorage.setItem(flagChatStateKey, JSON.stringify(orderState));

          const cartItems = JSON.parse(localStorage.getItem(flagChatKey)) || [];
          const reply = formatOrderSummary(cartItems, address);
          setMessages((prev) => [...prev, { role: "bot", content: reply }]);
          return;
        }

        if (orderState.stage === "awaiting_confirmation") {
          if (["oke", "co", "roi"].includes(normalizedInput)) {
            orderState = {
              ...orderState,
              stage: "awaiting_payment",
            };
            localStorage.setItem(flagChatStateKey, JSON.stringify(orderState));
            setMessages((prev) => [
              ...prev,
              {
                role: "bot",
                content:
                  "Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n: 1. Ti·ªÅn m·∫∑t khi nh·∫≠n h√†ng, 2. Thanh to√°n VNPay. H√£y tr·∫£ l·ªùi 'ti·ªÅn m·∫∑t' ho·∫∑c 'vnpay'.",
              },
            ]);
            return;
          }

          setMessages((prev) => [
            ...prev,
            {
              role: "bot",
              content:
                "Vui l√≤ng x√°c nh·∫≠n b·∫±ng c√°ch tr·∫£ l·ªùi 'oke', 'c√≥', ho·∫∑c 'r·ªìi' ƒë·ªÉ ti·∫øp t·ª•c ƒë·∫∑t h√†ng.",
            },
          ]);
          return;
        }

        if (orderState.stage === "awaiting_payment") {
          if (["tien mat", "ti·ªÅn m·∫∑t"].includes(normalizedInput)) {
            if (!token) {
              setMessages((prev) => [
                ...prev,
                {
                  role: "bot",
                  content: `B·∫°n c·∫ßn <a href="/login">ƒëƒÉng nh·∫≠p</a> ƒë·ªÉ ƒë·∫∑t h√†ng!`,
                },
              ]);
              localStorage.removeItem(flagChatKey);
              localStorage.removeItem(flagChatStateKey);
              return;
            }

            const cartItems =
              JSON.parse(localStorage.getItem(flagChatKey)) || [];
            const result = await createOrder(
              token,
              cartItems,
              orderState.address,
              "COD"
            );
            setMessages((prev) => [
              ...prev,
              { role: "bot", content: result.message },
            ]);
            return;
          }

          if (["vnpay"].includes(normalizedInput)) {
            if (!token) {
              setMessages((prev) => [
                ...prev,
                {
                  role: "bot",
                  content: `B·∫°n c·∫ßn <a href="/login">ƒëƒÉng nh·∫≠p</a> ƒë·ªÉ ƒë·∫∑t h√†ng!`,
                },
              ]);
              localStorage.removeItem(flagChatKey);
              localStorage.removeItem(flagChatStateKey);
              return;
            }

            const cartItems =
              JSON.parse(localStorage.getItem(flagChatKey)) || [];
            const total = cartItems.reduce(
              (sum, item) => sum + item.stock.product.price * item.quantity,
              0
            );
            const result = await initiateVNPayPayment(token, total);
            if (result.success) {
              const selectedItems = cartItems.map((item) => ({
                productId: item.stock.product.id,
                quantity: item.quantity,
                name: item.stock.product.name,
                photo: item.stock.product.photo,
                size: item.stock.size,
                color: item.stock.color,
                price: item.stock.product.price,
              }));
              localStorage.setItem(
                "selectedItems",
                JSON.stringify(selectedItems)
              );
              localStorage.setItem("total", total);
              window.location.href = result.paymentUrl;
            } else {
              setMessages((prev) => [
                ...prev,
                { role: "bot", content: result.message },
              ]);
              localStorage.removeItem(flagChatKey);
              localStorage.removeItem(flagChatStateKey);
            }
            return;
          }

          setMessages((prev) => [
            ...prev,
            {
              role: "bot",
              content:
                "Vui l√≤ng ch·ªçn 'ti·ªÅn m·∫∑t' ho·∫∑c 'vnpay' ƒë·ªÉ ti·∫øp t·ª•c thanh to√°n.",
            },
          ]);
          return;
        }
      }
      const lowerInput = input.toLowerCase().trim();
      const normalizedInput = removeDiacritics(lowerInput); // Normalize input
      const patterns = [
        { key: "chao", action: "greeting" },
        { key: "hi", action: "greeting" },
        { key: "tim san pham", action: "searchProducts" },
        { key: "t√¨m", action: "searchProducts" },
        { key: "xem san pham", action: "searchProducts" }, // Th√™m "xem s·∫£n ph·∫©m"
        { key: "xem", action: "searchProducts" }, // Th√™m "xem"
        { key: "chi tiet san pham", action: "productDetails" },

        { key: "gia cao nhat", action: "highestPrice" },
        { key: "gia thap nhat", action: "lowestPrice" },
        { key: "t√¨m xe dap", action: "searchProducts" }, // Add specific pattern
        { key: "tim xe", action: "searchProducts" },
        { key: "gi·ªè h√†ng", action: "cartProduct" },
        { key: "th√™m ", action: "cartProduct" },
        { key: "xem gi·ªè h√†ng ", action: "cartList" },
        { key: "gi·ªè hang c·ªßa t√¥i ", action: "cartList" },
        { key: "s·ªë s·∫£n ph·∫©m trong gi·ªè h√†ng", action: "countCartItems" },
        { key: "x√≥a s·∫£n ph·∫©m", action: "removeCartItem" },
        { key: "tƒÉng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m", action: "increaseCartItemQuantity" },
        { key: "gi·∫£m s·ªë l∆∞·ª£ng s·∫£n ph·∫©m", action: "decreaseCartItemQuantity" },

        { key: "mua hang", action: "orderProduct" },
        { key: "dat hang", action: "orderProduct" },
      ];

      const fuse = new Fuse(patterns, {
        keys: ["key"],
        threshold: 0.8, // 0.3 c√≥ th·ªÉ qu√° nghi√™m ng·∫∑t
        ignoreLocation: true,
        normalize: true,
        includeScore: true,
      });

      const result = fuse.search(normalizedInput); // Use normalized input
      const matchedPattern = result.length > 0 ? result[0].item : null;

      // console.log(
      //   "Input:",
      //   lowerInput,
      //   "Normalized:",
      //   normalizedInput,
      //   "Matched:",
      //   matchedPattern
      // ); // Debug log

      if (matchedPattern) {
        switch (matchedPattern.action) {
          case "greeting": {
            const reply = `Ch√†o b·∫°n! üòä T√¥i l√† TIENDO#STORE Chatbot, h·ªó tr·ª£ b·∫°n mua s·∫Øm d·ªÖ d√†ng! B·∫°n c√≥ th·ªÉ:
- T√¨m s·∫£n ph·∫©m: "t√¨m xe"
- Xem chi ti·∫øt: "chi ti·∫øt s·∫£n ph·∫©m id [s·ªë]"
- Qu·∫£n l√Ω gi·ªè h√†ng: "th√™m v√†o gi·ªè h√†ng id [s·ªë] k√≠ch th∆∞·ªõc [size] m√†u [color] s·ªë l∆∞·ª£ng [s·ªë]", "x√≥a s·∫£n ph·∫©m id [s·ªë]", "tƒÉng/gi·∫£m s·ªë l∆∞·ª£ng s·∫£n ph·∫©m id [s·ªë] s·ªë l∆∞·ª£ng [s·ªë]"
- Xem gi·ªè h√†ng: "xem gi·ªè h√†ng" ho·∫∑c "s·ªë s·∫£n ph·∫©m trong gi·ªè h√†ng"
- ƒê·∫∑t h√†ng: "ƒë·∫∑t h√†ng"
H√£y h·ªèi b·∫•t k·ª≥ c√¢u g√¨, t√¥i s·∫Ω gi√∫p ngay!`;
            setMessages((prev) => [...prev, { role: "bot", content: reply }]);
            return;
          }

          case "productDetails": {
            const productIdMatch = lowerInput.match(
              /(?:id|sp|s·∫£n ph·∫©m(?:\s+id)?)(?:\s*[:=]?\s*|\s+l√†\s+)(\d+)/i
            );
            const productNameMatch = lowerInput.match(
              /t√™n\s*[:=]?\s*([\w\s]+)/i
            );
            let foundProduct = null;

            if (productIdMatch) {
              const productId = productIdMatch[1];
              try {
                const res = await axios.get(`${Api}/products/${productId}`);
                foundProduct = res.data;
              } catch (error) {
                console.error("Error fetching product by ID:", error);
                foundProduct = null;
              }
            } else if (productNameMatch) {
              const productName = productNameMatch[1].trim();
              const products = await fetchProducts();
              foundProduct = products.find((p) =>
                p.name.toLowerCase().includes(productName.toLowerCase())
              );
            } else {
              setMessages((prev) => [
                ...prev,
                {
                  role: "bot",
                  content:
                    'B·∫°n mu·ªën xem chi ti·∫øt s·∫£n ph·∫©m n√†o? Vui l√≤ng nh·∫≠p theo c√∫ ph√°p:\n- "chi ti·∫øt s·∫£n ph·∫©m id [s·ªë]"\n- ho·∫∑c "chi ti·∫øt s·∫£n ph·∫©m t√™n [t√™n s·∫£n ph·∫©m]"',
                },
              ]);
              return;
            }

            if (foundProduct) {
              const reply = formatProductDetails(foundProduct);
              setMessages((prev) => [...prev, { role: "bot", content: reply }]);
            } else {
              setMessages((prev) => [
                ...prev,
                {
                  role: "bot",
                  content: `Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID ho·∫∑c t√™n ƒë√£ cung c·∫•p. Vui l√≤ng ki·ªÉm tra l·∫°i ho·∫∑c th·ª≠ nh·∫≠p: "chi ti·∫øt s·∫£n ph·∫©m id [s·ªë]" ho·∫∑c "chi ti·∫øt s·∫£n ph·∫©m t√™n [t√™n s·∫£n ph·∫©m]".`,
                },
              ]);
            }
            return;
          }

          case "searchProducts": {
            let lowerInput = input.toLowerCase();
            let searchInput;
            if (
              lowerInput === "xem" ||
              lowerInput === "sp" ||
              lowerInput === "s·∫£n ph·∫©m" ||
              lowerInput === "xem s·∫£n ph·∫©m"
            ) {
              searchInput = null; // t√¨m t·∫•t c·∫£ s·∫£n ph·∫©m
            } else {
              searchInput = lowerInput
                .replace("t√¨m s·∫£n ph·∫©m", "")
                .replace("t√¨m", "")
                .replace("xem s·∫£n ph·∫©m", "")
                .replace("xem", "")
                .trim();

              // N·∫øu sau khi lo·∫°i b·ªè t·ª´ kh√≥a m√† r·ªóng => y√™u c·∫ßu nh·∫≠p l·∫°i
              if (!searchInput) {
                setMessages((prev) => [
                  ...prev,
                  {
                    role: "bot",
                    content:
                      'Vui l√≤ng cung c·∫•p t·ª´ kh√≥a t√¨m ki·∫øm. V√≠ d·ª•: "t√¨m √°o s∆° mi", "xem qu·∫ßn jeans", ho·∫∑c "t√¨m s·∫£n ph·∫©m √°o".',
                  },
                ]);
                return;
              }
            }
            console.log("D·ªØ li·ªáu tr·∫£ ƒëi:", searchInput); // Debug log

            const products = await searchProducts(searchInput);
            console.log("D·ªØ li·ªáu tr·∫£ v·ªÅ:", products); // Debug log

            if (products.length === 0) {
              setMessages((prev) => [
                ...prev,
                {
                  role: "bot",
                  content: `Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o v·ªõi t·ª´ kh√≥a "${searchInput}". H√£y th·ª≠ t·ª´ kh√≥a kh√°c nh∆∞ "√°o s∆° mi" ho·∫∑c "qu·∫ßn jeans"!`,
                },
              ]);
              return;
            }

            const reply = formatProductList(products, 6);
            setMessages((prev) => [...prev, { role: "bot", content: reply }]);
            return;
          }

          case "highestPrice": {
            const products = await fetchProducts();
            if (products.length === 0) {
              setMessages((prev) => [
                ...prev,
                { role: "bot", content: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o." },
              ]);
              return;
            }
            const highest = products.reduce((max, p) =>
              p.price > max.price ? p : max
            );
            const reply = formatProductDetails(highest);
            setMessages((prev) => [...prev, { role: "bot", content: reply }]);
            return;
          }

          case "lowestPrice": {
            const products = await fetchProducts();
            if (products.length === 0) {
              setMessages((prev) => [
                ...prev,
                { role: "bot", content: "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o." },
              ]);
              return;
            }
            const lowest = products.reduce((min, p) =>
              p.price < min.price ? p : min
            );
            const reply = formatProductDetails(lowest);
            setMessages((prev) => [...prev, { role: "bot", content: reply }]);
            return;
          }

          case "cartProduct": {
            const token = localStorage.getItem("token");
            if (!token) {
              const reply = `B·∫°n c·∫ßn <a href="/login">ƒëƒÉng nh·∫≠p</a> ƒë·ªÉ th√™m v√†o gi·ªè h√†ng!`;
              setMessages((prev) => [...prev, { role: "bot", content: reply }]);
              return;
            }

            const authResult = await getAuth(token);
            if (!authResult.success) {
              const reply = `‚ö†Ô∏è ${authResult.message} Vui l√≤ng <a href="/login">ƒëƒÉng nh·∫≠p l·∫°i</a>.`;
              setMessages((prev) => [...prev, { role: "bot", content: reply }]);
              return;
            }

            // Parse input for product ID, size, color, and quantity
            const productIdMatch = lowerInput.match(
              /(?:id|sp|s·∫£n ph·∫©m(?:\s+id)?)(?:\s*[:=]?\s*|\s+l√†\s+)(\d+)/i
            );
            const sizeMatch = lowerInput.match(
              /(?:k√≠ch th∆∞·ªõc|size)\s*[:=]?\s*([\w\s]+)/i
            );
            const colorMatch = lowerInput.match(
              /(?:m√†u s·∫Øc|m√†u|color)\s*[:=]?\s*([\w\s]+)/i
            );
            const quantityMatch = lowerInput.match(
              /(?:s·ªë l∆∞·ª£ng|so luong|sl|quantity)\s*[:=]?\s*(\d+)/i
            );

            if (!productIdMatch) {
              const reply = `Vui l√≤ng cung c·∫•p ID s·∫£n ph·∫©m ƒë·ªÉ th√™m v√†o gi·ªè h√†ng. V√≠ d·ª•: "th√™m v√†o gi·ªè h√†ng sp [s·ªë]".`;
              setMessages((prev) => [...prev, { role: "bot", content: reply }]);
              return;
            }

            const productId = productIdMatch[1];
            const size = sizeMatch ? sizeMatch[1].trim() : null;
            const color = colorMatch ? colorMatch[1].trim() : null;
            const quantity = quantityMatch ? parseInt(quantityMatch[1]) : 1;

            if (quantity > 10) {
              const reply = `S·ªë l∆∞·ª£ng t·ªëi ƒëa cho m·ªói s·∫£n ph·∫©m trong gi·ªè h√†ng l√† 10. Vui l√≤ng ch·ªçn s·ªë l∆∞·ª£ng t·ª´ 1 ƒë·∫øn 10.`;
              setMessages((prev) => [...prev, { role: "bot", content: reply }]);
              return;
            }

            try {
              // Fetch product details
              const res = await axios.get(`${Api}/products/${productId}`);
              const product = res.data;
              const stocks = product.stocks || [];

              if (!stocks.length) {
                const reply = `S·∫£n ph·∫©m v·ªõi ID ${productId} kh√¥ng c√≥ s·∫µn trong kho. Vui l√≤ng ki·ªÉm tra l·∫°i.`;
                setMessages((prev) => [
                  ...prev,
                  { role: "bot", content: reply },
                ]);
                return;
              }

              // Find matching stock
              let stock = stocks.find(
                (item) =>
                  (!size || item.size === size) &&
                  (!color || item.color === color)
              );

              if (!stock && (!size || !color)) {
                stock = stocks[0]; // Default to first stock if size/color not specified
              }

              if (!stock) {
                const reply = `Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi k√≠ch th∆∞·ªõc "${size}" v√† m√†u "${color}". Vui l√≤ng ki·ªÉm tra l·∫°i ho·∫∑c xem chi ti·∫øt s·∫£n ph·∫©m b·∫±ng "chi ti·∫øt s·∫£n ph·∫©m id ${productId}".`;
                setMessages((prev) => [
                  ...prev,
                  { role: "bot", content: reply },
                ]);
                return;
              }
              if (quantity > stock.quantity) {
                const reply = `S·ªë l∆∞·ª£ng y√™u c·∫ßu (${quantity}) v∆∞·ª£t qu√° s·ªë l∆∞·ª£ng c√≥ s·∫µn (${stock.quantity}) cho s·∫£n ph·∫©m "${product.name}" (k√≠ch th∆∞·ªõc: ${stock.size}, m√†u: ${stock.color}).`;
                setMessages((prev) => [
                  ...prev,
                  { role: "bot", content: reply },
                ]);
                return;
              }

              if (quantity > stock.quantity) {
                const reply = `S·ªë l∆∞·ª£ng y√™u c·∫ßu (${quantity}) v∆∞·ª£t qu√° s·ªë l∆∞·ª£ng c√≥ s·∫µn (${stock.quantity}) cho s·∫£n ph·∫©m "${product.name}" (k√≠ch th∆∞·ªõc: ${stock.size}, m√†u: ${stock.color}).`;
                setMessages((prev) => [
                  ...prev,
                  { role: "bot", content: reply },
                ]);
                return;
              }

              // Add to cart (authenticated user)
              let reply;
              try {
                const response = await axios.post(
                  `${Api}/product/cart-list`,
                  {
                    stockId: stock.id,
                    quantity: quantity,
                  },
                  {
                    headers: {
                      Authorization: `Bearer ${token}`,
                    },
                  }
                );
                reply = `ƒê√£ th√™m <strong>${product.name}</strong> (k√≠ch th∆∞·ªõc: ${stock.size}, m√†u: ${stock.color}, s·ªë l∆∞·ª£ng: ${quantity}) v√†o gi·ªè h√†ng!`;
              } catch (error) {
                console.error(
                  "Error adding to cart:",
                  error.response || error.message
                );
                reply = `C√≥ l·ªói khi th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng. Vui l√≤ng th·ª≠ l·∫°i!`;
                setMessages((prev) => [
                  ...prev,
                  { role: "bot", content: reply },
                ]);
                return;
              }

              setMessages((prev) => [...prev, { role: "bot", content: reply }]);
            } catch (error) {
              console.error(
                "Error fetching product:",
                error.response || error.message
              );
              const reply = `Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID ${productId}. Vui l√≤ng ki·ªÉm tra l·∫°i ho·∫∑c nh·∫≠p "chi ti·∫øt s·∫£n ph·∫©m id [s·ªë]".`;
              setMessages((prev) => [...prev, { role: "bot", content: reply }]);
            }
            return;
          }

          case "cartList": {
            const token = localStorage.getItem("token");
            const cartResult = await getCartItems(token);
            let reply;

            if (!cartResult.success) {
              reply =
                cartResult.message +
                (token ? ` Vui l√≤ng <a href="/login">ƒëƒÉng nh·∫≠p l·∫°i</a>.` : "");
              setMessages((prev) => [...prev, { role: "bot", content: reply }]);
              return;
            }

            reply = formatCartList(cartResult.cartItems);
            setMessages((prev) => [...prev, { role: "bot", content: reply }]);
            return;
          }

          case "countCartItems": {
            const token = localStorage.getItem("token");
            const cartResult = await getCartItems(token);
            let reply;

            if (!cartResult.success) {
              reply =
                cartResult.message +
                (token ? ` Vui l√≤ng <a href="/login">ƒëƒÉng nh·∫≠p l·∫°i</a>.` : "");
              setMessages((prev) => [...prev, { role: "bot", content: reply }]);
              return;
            }

            const count = cartResult.cartItems.length;
            reply = `Gi·ªè h√†ng c·ªßa b·∫°n hi·ªán c√≥ <strong>${count}</strong> s·∫£n ph·∫©m. ƒê·ªÉ xem chi ti·∫øt, h√£y n√≥i: "xem gi·ªè h√†ng".`;
            setMessages((prev) => [...prev, { role: "bot", content: reply }]);
            return;
          }

          case "removeCartItem": {
            const token = localStorage.getItem("token");
            const cartIdMatch = lowerInput.match(
              /(?:id|sp|s·∫£n ph·∫©m(?:\s+id)?)(?:\s*[:=]?\s*|\s+l√†\s+)(\d+)/i
            );

            if (!cartIdMatch) {
              const reply = `Vui l√≤ng cung c·∫•p ID s·∫£n ph·∫©m trong gi·ªè h√†ng ƒë·ªÉ x√≥a. V√≠ d·ª•: "x√≥a s·∫£n ph·∫©m id [s·ªë]".`;
              setMessages((prev) => [...prev, { role: "bot", content: reply }]);
              return;
            }

            const cartId = parseInt(cartIdMatch[1]);
            let reply;

            if (token) {
              const authResult = await getAuth(token);
              if (!authResult.success) {
                reply = `‚ö†Ô∏è ${authResult.message} Vui l√≤ng <a href="/login">ƒëƒÉng nh·∫≠p l·∫°i</a>.`;
                setMessages((prev) => [
                  ...prev,
                  { role: "bot", content: reply },
                ]);
                return;
              }

              try {
                const cartResult = await getCartItems(token);
                if (!cartResult.success) {
                  reply = cartResult.message;
                  setMessages((prev) => [
                    ...prev,
                    { role: "bot", content: reply },
                  ]);
                  return;
                }

                const cartItem = cartResult.cartItems.find(
                  (item) => item.id === cartId
                );
                if (!cartItem) {
                  reply = `Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID ${cartId} trong gi·ªè h√†ng. H√£y ki·ªÉm tra l·∫°i ho·∫∑c xem gi·ªè h√†ng b·∫±ng "xem gi·ªè h√†ng".`;
                  setMessages((prev) => [
                    ...prev,
                    { role: "bot", content: reply },
                  ]);
                  return;
                }

                await axios.delete(`${Api}/product/cart-list/${cartId}`, {
                  headers: { Authorization: `Bearer ${token}` },
                });

                const updatedCartResult = await getCartItems(token);
                reply = `ƒê√£ x√≥a s·∫£n ph·∫©m <strong>${
                  cartItem.stock.product.name
                }</strong> kh·ªèi gi·ªè h√†ng. D∆∞·ªõi ƒë√¢y l√† gi·ªè h√†ng hi·ªán t·∫°i:\n${formatCartList(
                  updatedCartResult.cartItems
                )}`;
                setMessages((prev) => [
                  ...prev,
                  { role: "bot", content: reply },
                ]);
              } catch (error) {
                console.error(
                  "Error removing cart item:",
                  error.response || error.message
                );
                reply = `C√≥ l·ªói khi x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng. Vui l√≤ng th·ª≠ l·∫°i!`;
                setMessages((prev) => [
                  ...prev,
                  { role: "bot", content: reply },
                ]);
                return;
              }
            } else {
              const localCartList = localStorage.getItem("cartList");
              if (!localCartList) {
                reply = `Gi·ªè h√†ng c·ªßa b·∫°n hi·ªán ƒëang tr·ªëng. H√£y th√™m s·∫£n ph·∫©m b·∫±ng l·ªánh: "th√™m v√†o gi·ªè h√†ng id [s·ªë] k√≠ch th∆∞·ªõc [size] m√†u [color] s·ªë l∆∞·ª£ng [s·ªë]".`;
                setMessages((prev) => [
                  ...prev,
                  { role: "bot", content: reply },
                ]);
                return;
              }

              try {
                const response = await axios.post(
                  `${Api}/product/cart-list/guest`,
                  {
                    cartList: localCartList,
                  }
                );
                const cartItems = response.data;
                const cartItem = cartItems.find((item) => item.id === cartId);

                if (!cartItem) {
                  reply = `Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID ${cartId} trong gi·ªè h√†ng. H√£y ki·ªÉm tra l·∫°i ho·∫∑c xem gi·ªè h√†ng b·∫±ng "xem gi·ªè h√†ng".`;
                  setMessages((prev) => [
                    ...prev,
                    { role: "bot", content: reply },
                  ]);
                  return;
                }

                let items = JSON.parse(localCartList);
                items = items.filter((item, index) => index + 1 !== cartId);
                localStorage.setItem("cartList", JSON.stringify(items));

                const updatedResponse = await axios.post(
                  `${Api}/product/cart-list/guest`,
                  {
                    cartList: JSON.stringify(items),
                  }
                );
                reply = `ƒê√£ x√≥a s·∫£n ph·∫©m <strong>${
                  cartItem.stock.product.name
                }</strong> kh·ªèi gi·ªè h√†ng. D∆∞·ªõi ƒë√¢y l√† gi·ªè h√†ng hi·ªán t·∫°i:\n${formatCartList(
                  updatedResponse.data
                )}`;
                setMessages((prev) => [
                  ...prev,
                  { role: "bot", content: reply },
                ]);
              } catch (error) {
                console.error(
                  "Error removing guest cart item:",
                  error.response || error.message
                );
                reply = `C√≥ l·ªói khi x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng. Vui l√≤ng th·ª≠ l·∫°i!`;
                setMessages((prev) => [
                  ...prev,
                  { role: "bot", content: reply },
                ]);
                return;
              }
            }
            return;
          }

          case "increaseCartItemQuantity": {
            const token = localStorage.getItem("token");
            const cartIdMatch = lowerInput.match(
              /(?:id|sp|s·∫£n ph·∫©m(?:\s+id)?)(?:\s*[:=]?\s*|\s+l√†\s+)(\d+)/i
            );
            const quantityMatch = lowerInput.match(
              /(?:s·ªë l∆∞·ª£ng|sl|quantity)\s*[:=]?\s*(\d+)/i
            );

            if (!cartIdMatch) {
              const reply = `Vui l√≤ng cung c·∫•p ID s·∫£n ph·∫©m trong gi·ªè h√†ng ƒë·ªÉ tƒÉng s·ªë l∆∞·ª£ng. V√≠ d·ª•: "tƒÉng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m id [s·ªë] s·ªë l∆∞·ª£ng [s·ªë]".`;
              setMessages((prev) => [...prev, { role: "bot", content: reply }]);
              return;
            }

            const cartId = parseInt(cartIdMatch[1]);
            const quantityIncrement = quantityMatch
              ? parseInt(quantityMatch[1])
              : 1;
            let reply;

            if (token) {
              const authResult = await getAuth(token);
              if (!authResult.success) {
                reply = `‚ö†Ô∏è ${authResult.message} Vui l√≤ng <a href="/login">ƒëƒÉng nh·∫≠p l·∫°i</a>.`;
                setMessages((prev) => [
                  ...prev,
                  { role: "bot", content: reply },
                ]);
                return;
              }

              try {
                const cartResult = await getCartItems(token);
                if (!cartResult.success) {
                  reply = cartResult.message;
                  setMessages((prev) => [
                    ...prev,
                    { role: "bot", content: reply },
                  ]);
                  return;
                }

                const cartItem = cartResult.cartItems.find(
                  (item) => item.id === cartId
                );
                if (!cartItem) {
                  reply = `Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID ${cartId} trong gi·ªè h√†ng. H√£y ki·ªÉm tra l·∫°i ho·∫∑c xem gi·ªè h√†ng b·∫±ng "xem gi·ªè h√†ng".`;
                  setMessages((prev) => [
                    ...prev,
                    { role: "bot", content: reply },
                  ]);
                  return;
                }

                const newQuantity = cartItem.quantity + quantityIncrement;
                if (newQuantity > 10) {
                  reply = `S·ªë l∆∞·ª£ng t·ªëi ƒëa cho m·ªói s·∫£n ph·∫©m trong gi·ªè h√†ng l√† 10. Hi·ªán t·∫°i s·∫£n ph·∫©m <strong>${cartItem.stock.product.name}</strong> c√≥ ${cartItem.quantity} ƒë∆°n v·ªã.`;
                  setMessages((prev) => [
                    ...prev,
                    { role: "bot", content: reply },
                  ]);
                  return;
                }
                if (newQuantity > cartItem.stock.quantity) {
                  reply = `S·ªë l∆∞·ª£ng y√™u c·∫ßu (${newQuantity}) v∆∞·ª£t qu√° s·ªë l∆∞·ª£ng c√≥ s·∫µn (${cartItem.stock.quantity}) cho s·∫£n ph·∫©m <strong>${cartItem.stock.product.name}</strong>.`;
                  setMessages((prev) => [
                    ...prev,
                    { role: "bot", content: reply },
                  ]);
                  return;
                }

                await axios.put(
                  `${Api}/product/cart-list/${cartId}`,
                  { quantity: newQuantity },
                  { headers: { Authorization: `Bearer ${token}` } }
                );

                const updatedCartResult = await getCartItems(token);
                reply = `ƒê√£ tƒÉng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m <strong>${
                  cartItem.stock.product.name
                }</strong> l√™n ${newQuantity}. D∆∞·ªõi ƒë√¢y l√† gi·ªè h√†ng hi·ªán t·∫°i:\n${formatCartList(
                  updatedCartResult.cartItems
                )}`;
                setMessages((prev) => [
                  ...prev,
                  { role: "bot", content: reply },
                ]);
              } catch (error) {
                console.error(
                  "Error increasing cart item quantity:",
                  error.response || error.message
                );
                reply = `C√≥ l·ªói khi tƒÉng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m. Vui l√≤ng th·ª≠ l·∫°i!`;
                setMessages((prev) => [
                  ...prev,
                  { role: "bot", content: reply },
                ]);
                return;
              }
            } else {
              const localCartList = localStorage.getItem("cartList");
              if (!localCartList) {
                reply = `Gi·ªè h√†ng c·ªßa b·∫°n hi·ªán ƒëang tr·ªëng. H√£y th√™m s·∫£n ph·∫©m b·∫±ng l·ªánh: "th√™m v√†o gi·ªè h√†ng id [s·ªë] k√≠ch th∆∞·ªõc [size] m√†u [color] s·ªë l∆∞·ª£ng [s·ªë]".`;
                setMessages((prev) => [
                  ...prev,
                  { role: "bot", content: reply },
                ]);
                return;
              }

              try {
                const response = await axios.post(
                  `${Api}/product/cart-list/guest`,
                  {
                    cartList: localCartList,
                  }
                );
                const cartItems = response.data;
                const cartItem = cartItems.find((item) => item.id === cartId);

                if (!cartItem) {
                  reply = `Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID ${cartId} trong gi·ªè h√†ng. H√£y ki·ªÉm tra l·∫°i ho·∫∑c xem gi·ªè h√†ng b·∫±ng "xem gi·ªè h√†ng".`;
                  setMessages((prev) => [
                    ...prev,
                    { role: "bot", content: reply },
                  ]);
                  return;
                }

                const newQuantity = cartItem.quantity + quantityIncrement;
                if (newQuantity > 10) {
                  reply = `S·ªë l∆∞·ª£ng t·ªëi ƒëa cho m·ªói s·∫£n ph·∫©m trong gi·ªè h√†ng l√† 10. Hi·ªán t·∫°i s·∫£n ph·∫©m <strong>${cartItem.stock.product.name}</strong> c√≥ ${cartItem.quantity} ƒë∆°n v·ªã.`;
                  setMessages((prev) => [
                    ...prev,
                    { role: "bot", content: reply },
                  ]);
                  return;
                }
                if (newQuantity > cartItem.stock.quantity) {
                  reply = `S·ªë l∆∞·ª£ng y√™u c·∫ßu (${newQuantity}) v∆∞·ª£t qu√° s·ªë l∆∞·ª£ng c√≥ s·∫µn (${cartItem.stock.quantity}) cho s·∫£n ph·∫©m <strong>${cartItem.stock.product.name}</strong>.`;
                  setMessages((prev) => [
                    ...prev,
                    { role: "bot", content: reply },
                  ]);
                  return;
                }

                let items = JSON.parse(localCartList);
                items = items.map((item, index) => {
                  if (index + 1 === cartId) {
                    return [{ ...item[0], quantity: newQuantity }];
                  }
                  return item;
                });
                localStorage.setItem("cartList", JSON.stringify(items));

                const updatedResponse = await axios.post(
                  `${Api}/product/cart-list/guest`,
                  {
                    cartList: JSON.stringify(items),
                  }
                );
                reply = `ƒê√£ tƒÉng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m <strong>${
                  cartItem.stock.product.name
                }</strong> l√™n ${newQuantity}. D∆∞·ªõi ƒë√¢y l√† gi·ªè h√†ng hi·ªán t·∫°i:\n${formatCartList(
                  updatedResponse.data
                )}`;
                setMessages((prev) => [
                  ...prev,
                  { role: "bot", content: reply },
                ]);
              } catch (error) {
                console.error(
                  "Error increasing guest cart item quantity:",
                  error.response || error.message
                );
                reply = `C√≥ l·ªói khi tƒÉng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m. Vui l√≤ng th·ª≠ l·∫°i!`;
                setMessages((prev) => [
                  ...prev,
                  { role: "bot", content: reply },
                ]);
                return;
              }
            }
            return;
          }

          case "decreaseCartItemQuantity": {
            const token = localStorage.getItem("token");
            const cartIdMatch = lowerInput.match(
              /(?:id|sp|s·∫£n ph·∫©m(?:\s+id)?)(?:\s*[:=]?\s*|\s+l√†\s+)(\d+)/i
            );
            const quantityMatch = lowerInput.match(
              /(?:s·ªë l∆∞·ª£ng|sl|quantity)\s*[:=]?\s*(\d+)/i
            );

            if (!cartIdMatch) {
              const reply = `Vui l√≤ng cung c·∫•p ID s·∫£n ph·∫©m trong gi·ªè h√†ng ƒë·ªÉ gi·∫£m s·ªë l∆∞·ª£ng. V√≠ d·ª•: "gi·∫£m s·ªë l∆∞·ª£ng s·∫£n ph·∫©m id [s·ªë] s·ªë l∆∞·ª£ng [s·ªë]".`;
              setMessages((prev) => [...prev, { role: "bot", content: reply }]);
              return;
            }

            const cartId = parseInt(cartIdMatch[1]);
            const quantityDecrement = quantityMatch
              ? parseInt(quantityMatch[1])
              : 1;
            let reply;

            if (token) {
              const authResult = await getAuth(token);
              if (!authResult.success) {
                reply = `‚ö†Ô∏è ${authResult.message} Vui l√≤ng <a href="/login">ƒëƒÉng nh·∫≠p l·∫°i</a>.`;
                setMessages((prev) => [
                  ...prev,
                  { role: "bot", content: reply },
                ]);
                return;
              }

              try {
                const cartResult = await getCartItems(token);
                if (!cartResult.success) {
                  reply = cartResult.message;
                  setMessages((prev) => [
                    ...prev,
                    { role: "bot", content: reply },
                  ]);
                  return;
                }

                const cartItem = cartResult.cartItems.find(
                  (item) => item.id === cartId
                );
                if (!cartItem) {
                  reply = `Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID ${cartId} trong gi·ªè h√†ng. H√£y ki·ªÉm tra l·∫°i ho·∫∑c xem gi·ªè h√†ng b·∫±ng "xem gi·ªè h√†ng".`;
                  setMessages((prev) => [
                    ...prev,
                    { role: "bot", content: reply },
                  ]);
                  return;
                }

                const newQuantity = cartItem.quantity - quantityDecrement;
                if (newQuantity <= 0) {
                  await axios.delete(`${Api}/product/cart-list/${cartId}`, {
                    headers: { Authorization: `Bearer ${token}` },
                  });
                  const updatedCartResult = await getCartItems(token);
                  reply = `ƒê√£ x√≥a s·∫£n ph·∫©m <strong>${
                    cartItem.stock.product.name
                  }</strong> kh·ªèi gi·ªè h√†ng v√¨ s·ªë l∆∞·ª£ng b·∫±ng 0. D∆∞·ªõi ƒë√¢y l√† gi·ªè h√†ng hi·ªán t·∫°i:\n${formatCartList(
                    updatedCartResult.cartItems
                  )}`;
                } else {
                  await axios.put(
                    `${Api}/product/cart-list/${cartId}`,
                    { quantity: newQuantity },
                    { headers: { Authorization: `Bearer ${token}` } }
                  );
                  const updatedCartResult = await getCartItems(token);
                  reply = `ƒê√£ gi·∫£m s·ªë l∆∞·ª£ng s·∫£n ph·∫©m <strong>${
                    cartItem.stock.product.name
                  }</strong> xu·ªëng ${newQuantity}. D∆∞·ªõi ƒë√¢y l√† gi·ªè h√†ng hi·ªán t·∫°i:\n${formatCartList(
                    updatedCartResult.cartItems
                  )}`;
                }
                setMessages((prev) => [
                  ...prev,
                  { role: "bot", content: reply },
                ]);
              } catch (error) {
                console.error(
                  "Error decreasing cart item quantity:",
                  error.response || error.message
                );
                reply = `C√≥ l·ªói khi gi·∫£m s·ªë l∆∞·ª£ng s·∫£n ph·∫©m. Vui l√≤ng th·ª≠ l·∫°i!`;
                setMessages((prev) => [
                  ...prev,
                  { role: "bot", content: reply },
                ]);
                return;
              }
            } else {
              const localCartList = localStorage.getItem("cartList");
              if (!localCartList) {
                reply = `Gi·ªè h√†ng c·ªßa b·∫°n hi·ªán ƒëang tr·ªëng. H√£y th√™m s·∫£n ph·∫©m b·∫±ng l·ªánh: "th√™m v√†o gi·ªè h√†ng id [s·ªë] k√≠ch th∆∞·ªõc [size] m√†u [color] s·ªë l∆∞·ª£ng [s·ªë]".`;
                setMessages((prev) => [
                  ...prev,
                  { role: "bot", content: reply },
                ]);
                return;
              }

              try {
                const response = await axios.post(
                  `${Api}/product/cart-list/guest`,
                  {
                    cartList: localCartList,
                  }
                );
                const cartItems = response.data;
                const cartItem = cartItems.find((item) => item.id === cartId);

                if (!cartItem) {
                  reply = `Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID ${cartId} trong gi·ªè h√†ng. H√£y ki·ªÉm tra l·∫°i ho·∫∑c xem gi·ªè h√†ng b·∫±ng "xem gi·ªè h√†ng".`;
                  setMessages((prev) => [
                    ...prev,
                    { role: "bot", content: reply },
                  ]);
                  return;
                }

                const newQuantity = cartItem.quantity - quantityDecrement;
                let items = JSON.parse(localCartList);
                if (newQuantity <= 0) {
                  items = items.filter((item, index) => index + 1 !== cartId);
                  localStorage.setItem("cartList", JSON.stringify(items));
                  const updatedResponse = await axios.post(
                    `${Api}/product/cart-list/guest`,
                    {
                      cartList: JSON.stringify(items),
                    }
                  );
                  reply = `ƒê√£ x√≥a s·∫£n ph·∫©m <strong>${
                    cartItem.stock.product.name
                  }</strong> kh·ªèi gi·ªè h√†ng v√¨ s·ªë l∆∞·ª£ng b·∫±ng 0. D∆∞·ªõi ƒë√¢y l√† gi·ªè h√†ng hi·ªán t·∫°i:\n${formatCartList(
                    updatedResponse.data
                  )}`;
                } else {
                  items = items.map((item, index) => {
                    if (index + 1 === cartId) {
                      return [{ ...item[0], quantity: newQuantity }];
                    }
                    return item;
                  });
                  localStorage.setItem("cartList", JSON.stringify(items));
                  const updatedResponse = await axios.post(
                    `${Api}/product/cart-list/guest`,
                    {
                      cartList: JSON.stringify(items),
                    }
                  );
                  reply = `ƒê√£ gi·∫£m s·ªë l∆∞·ª£ng s·∫£n ph·∫©m <strong>${
                    cartItem.stock.product.name
                  }</strong> xu·ªëng ${newQuantity}. D∆∞·ªõi ƒë√¢y l√† gi·ªè h√†ng hi·ªán t·∫°i:\n${formatCartList(
                    updatedResponse.data
                  )}`;
                }
                setMessages((prev) => [
                  ...prev,
                  { role: "bot", content: reply },
                ]);
              } catch (error) {
                console.error(
                  "Error decreasing guest cart item quantity:",
                  error.response || error.message
                );
                reply = `C√≥ l·ªói khi gi·∫£m s·ªë l∆∞·ª£ng s·∫£n ph·∫©m. Vui l√≤ng th·ª≠ l·∫°i!`;
                setMessages((prev) => [
                  ...prev,
                  { role: "bot", content: reply },
                ]);
                return;
              }
            }
            return;
          }

          case "orderProduct": {
            const token = localStorage.getItem("token");
            if (!token) {
              const reply = `B·∫°n c·∫ßn <a href="/login">ƒëƒÉng nh·∫≠p</a> ƒë·ªÉ ƒë·∫∑t h√†ng!`;
              setMessages((prev) => [...prev, { role: "bot", content: reply }]);
              return;
            }

            const authResult = await getAuth(token);
            if (!authResult.success) {
              const reply = `‚ö†Ô∏è ${authResult.message} Vui l√≤ng <a href="/login">ƒëƒÉng nh·∫≠p l·∫°i</a>.`;
              setMessages((prev) => [...prev, { role: "bot", content: reply }]);
              return;
            }

            const cartResult = await getCartItems(token);
            if (!cartResult.success) {
              setMessages((prev) => [
                ...prev,
                { role: "bot", content: cartResult.message },
              ]);
              break;
            }
            if (cartResult.cartItems.length === 0) {
              setMessages((prev) => [
                ...prev,
                {
                  role: "bot",
                  content:
                    "Gi·ªè h√†ng c·ªßa b·∫°n tr·ªëng. H√£y th√™m s·∫£n ph·∫©m tr∆∞·ªõc khi ƒë·∫∑t h√†ng!",
                },
              ]);
              break;
            }

            localStorage.setItem(
              flagChatKey,
              JSON.stringify(cartResult.cartItems)
            );

            const selectedItems = cartResult.cartItems.map((item) => ({
              productId: item.stock.product.id,
              quantity: item.quantity,
              name: item.stock.product.name,
              photo: item.stock.product.photo,
              size: item.stock.size,
              color: item.stock.color,
              price: item.stock.product.price,
            }));
            localStorage.setItem(
              "selectedItems",
              JSON.stringify(selectedItems)
            );

            const addressResult = await getUserDefaultAddress(userId, token);
            if (addressResult.success) {
              orderState = {
                stage: "awaiting_confirmation",
                address: addressResult.address,
              };
              localStorage.setItem(
                flagChatStateKey,
                JSON.stringify(orderState)
              );
              const reply = formatOrderSummary(
                cartResult.cartItems,
                addressResult.address
              );
              setMessages((prev) => [...prev, { role: "bot", content: reply }]);
            } else {
              orderState = {
                stage: "awaiting_address",
              };
              localStorage.setItem(
                flagChatStateKey,
                JSON.stringify(orderState)
              );
              setMessages((prev) => [
                ...prev,
                {
                  role: "bot",
                  content:
                    "Kh√¥ng t√¨m th·∫•y ƒë·ªãa ch·ªâ m·∫∑c ƒë·ªãnh. Vui l√≤ng cung c·∫•p ƒë·ªãa ch·ªâ giao h√†ng: H·ªç t√™n, ƒê·ªãa ch·ªâ, Th√†nh ph·ªë, Qu·ªëc gia, M√£ ZIP, S·ªë ƒëi·ªán tho·∫°i (c√°ch nhau b·∫±ng d·∫•u ph·∫©y). V√≠ d·ª•: 'Nguyen Van A, 123 ƒê∆∞·ªùng L√°ng, H√† N·ªôi, Vi·ªát Nam, 100000, 0123456789'.",
                },
              ]);
            }
            return;
          }

          // Other cases (s

          default:
            break;
        }
      }

      setMessages((prev) => [
        ...prev,
        {
          role: "bot",
          content:
            "Xin l·ªói, t√¥i ch∆∞a hi·ªÉu c√¢u h·ªèi c·ªßa b·∫°n. üòÖ H√£y th·ª≠ h·ªèi v·ªÅ s·∫£n ph·∫©m, chi ti·∫øt s·∫£n ph·∫©m, gi√° cao/th·∫•p nh·∫•t, t√¨m s·∫£n ph·∫©m (VD: 't√¨m √°o'), ho·∫∑c n√≥i 'ch√†o' ƒë·ªÉ bi·∫øt th√™m!",
        },
      ]);
    } catch (error) {
      console.error("Error in handleSend:", error.response || error.message);
      let errorMessage = "‚ö†Ô∏è C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau!";
      if (error.response?.status === 401) {
        errorMessage =
          '‚ö†Ô∏è Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n. Vui l√≤ng <a href="/login">ƒëƒÉng nh·∫≠p l·∫°i</a>.';
      } else if (error.response?.status === 404) {
        errorMessage =
          "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu. H√£y ki·ªÉm tra c√¢u h·ªèi ho·∫∑c th·ª≠ l·∫°i!";
      }
      setMessages((prev) => [...prev, { role: "bot", content: errorMessage }]);
    } finally {
      setLoading(false);
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === "Enter" && !loading) {
      handleSend();
    }
  };

  return (
    <div className="chatbot-container">
      <h2 className="chatbot-title">TIENDO#STORE Chatbot</h2>
      <div className="chatbox" ref={chatBoxRef}>
        {messages.map((msg, index) => (
          <div
            key={index}
            className={`message ${
              msg.role === "user" ? "user-message" : "bot-message"
            }`}
            dangerouslySetInnerHTML={{
              __html: `<strong>${
                msg.role === "user" ? "B·∫°n: " : "TIENDO#STORE Bot: "
              }</strong>${msg.content}`,
            }}
          />
        ))}
      </div>
      <div className="input-area">
        <input
          type="text"
          value={input}
          onChange={(e) => setInput(e.target.value)}
          onKeyPress={handleKeyPress}
          placeholder="H·ªèi t√¥i v·ªÅ s·∫£n ph·∫©m, gi√°, chi ti·∫øt, t√¨m ki·∫øm..."
          disabled={loading}
        />
        <button onClick={handleSend} disabled={loading}>
          {loading ? "ƒêang x·ª≠ l√Ω..." : "G·ª≠i"}
        </button>
      </div>
    </div>
  );
};

export default ChatBox;
